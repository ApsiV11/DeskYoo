{"version":3,"sources":["components/boxes/Header.js","services/connect.js","components/boxes/UserInfo.js","components/boxes/LogInBox.js","services/utils.js","components/boxes/MessageBox.js","services/locationApi.js","components/boxes/NewMessageBox.js","components/holders/Messages.js","components/boxes/ChannelBox.js","components/holders/Channels.js","components/util/Notification.js","services/appEvents.js","App.js","index.js"],"names":["Header","className","id","src","alt","width","height","socket","openSocket","window","location","hostname","onevent","packet","args","data","call","this","concat","sendRequest","event","emit","console","log","UserInfo","user","logOut","showNotification","username","score","style","backgroundColor","border","type","value","onClick","LogInBox","su","useState","logIn","setLogIn","setUsername","password","setPassword","confPassword","setConfpassword","registerSuccess","setRegisterSuccess","useEffect","on","document","getElementById","pointerEvents","reset","off","onSubmit","preventDefault","sha256","process","length","placeholder","onChange","target","time","timeDifference","Date","Math","round","handleOpenedThreadClick","cm","handleThreadClick","MessageBox","text","likes","color","messageType","styles","timeText","utils","role","aria-label","locationHelper","getLocation","cb","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","toString","longitude","axios","get","response","result","results","components","village","town","city","country","error","NewMessageBox","messageText","setMessageText","setLocation","handler","maxLength","split","Messages","messages","sm","map","message","key","handleChannelClick","handleOpenedChannelClick","ct","ChannelBox","name","followers","Channels","channels","st","openedChannel","channel","Notification","notificationStyle","background","fontSize","textAlign","borderStyle","borderRadius","padding","paddingLeft","paddingRight","left","right","appHandlers","setUser","setChannels","errorText","App","answers","setAnswers","openedThread","setOpenedThread","threads","setThreads","setOpenedChannel","notification","setNotification","setToThreads","useCallback","parentId","setToAnswers","find","thread","setToUser","setToChannels","setTimeout","ReactDOM","render"],"mappings":"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","file":"static/js/main.60482227.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => (\r\n    <div className=\"greenBox\" id=\"Header\">\r\n      <img src=\"https://raw.githubusercontent.com/UisDangerouz/DeskYoo/master/logo.png\" alt=\"DeskYoo\" width=\"400px\" height=\"auto\"></img>\r\n    </div>\r\n)\r\n\r\nexport default Header","import openSocket from \"socket.io-client\"\r\n\r\nconst socket = openSocket(`${window.location.hostname}:8080`)\r\n\r\nlet onevent = socket.onevent;\r\nsocket.onevent = function (packet) {\r\n  var args = packet.data || [];\r\n  onevent.call (this, packet);    // original call\r\n  packet.data = [\"*\"].concat(args);\r\n  onevent.call(this, packet);      // additional call to catch-all\r\n};\r\n\r\n\r\nconst sendRequest = (event, data) => {\r\n  if(event) {\r\n    socket.emit(event, data)\r\n  }\r\n  else{\r\n    console.log('Event must be specified')\r\n  }\r\n}\r\n\r\nwindow.sendRequest=sendRequest\r\n\r\nexport default socket","import React from 'react'\r\n\r\nimport socket from '../../services/connect'\r\n\r\nconst UserInfo = ({user, logOut, showNotification}) => (\r\n  user ?\r\n  <div className='yellowBox' id='UserInfo'>\r\n    <p>Username: {user.username}</p>\r\n    <p>{user.score} Yoo Points</p>\r\n    <input style={{backgroundColor: '#F05035', border: '2px solid gray'}} className='LogInElement' type='button' value='Logout' onClick={() => {\r\n      socket.emit('LOGOUT')\r\n      logOut()\r\n      showNotification('Logged out', 'green')\r\n      }}>\r\n\r\n    </input>\r\n    <br></br>\r\n    <br></br>\r\n  </div>\r\n  :\r\n  null\r\n)\r\n\r\nexport default UserInfo","import React, {useState, useEffect} from 'react'\r\nimport {sha256} from 'js-sha256'\r\n\r\nimport socket from '../../services/connect'\r\n\r\nconst LogInBox = ({su, showNotification}) => {\r\n  const [logIn, setLogIn] = useState(true)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confPassword, setConfpassword] = useState('')\r\n\r\n  const [registerSuccess, setRegisterSuccess] = useState(false)\r\n\r\n  useEffect(() => {\r\n    socket.on('LOGINSUCCESS', () => {\r\n      su(true)\r\n      document.getElementById('root').style.pointerEvents = 'auto'\r\n    })\r\n\r\n    socket.on('REGISTERSUCCESS', () => {\r\n      setRegisterSuccess(true)\r\n      document.getElementById('form').reset()\r\n      document.getElementById('root').style.pointerEvents = 'auto'\r\n    })\r\n\r\n    return function cleanup () {\r\n      socket.off('LOGINSUCCESS')\r\n      socket.off('REGISTERSUCCESS')\r\n    }\r\n  }, [su])\r\n\r\n  useEffect(() => {\r\n    setLogIn(true)\r\n  }, [registerSuccess])\r\n\r\n  const handleLoginSubmit = (event) => {\r\n    event.preventDefault()\r\n    document.getElementById('root').style.pointerEvents = 'none'\r\n\r\n    socket.emit('LOGIN', [username, sha256(password+process.env.REACT_APP_SECRET)])\r\n  }\r\n  \r\n  const handleRegisterSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n    if(password===confPassword && password.length>4){\r\n      document.getElementById('root').style.pointerEvents = 'none'\r\n\r\n      socket.emit('REGISTER', [username, sha256(password+process.env.REACT_APP_SECRET)])\r\n    }\r\n    else if(password!==confPassword){\r\n      showNotification('Passwords don\\'t match', 'red')\r\n    }\r\n    else if(password.length<5){\r\n      showNotification('Password too short', 'red')\r\n    }\r\n  }\r\n  \r\n  return(\r\n    <div id=\"loginContainer\">\r\n      <form id='form' className='yellowBox LogIn' onSubmit={logIn ? handleLoginSubmit : handleRegisterSubmit}>\r\n        <p><input placeholder='Username' className='LogInElement' type='text' onChange={(event) => setUsername(event.target.value)}></input></p>\r\n        <p><input placeholder='Password' className='LogInElement' type='password' onChange={(event) => setPassword(event.target.value)}></input></p>\r\n        {logIn ? null : <p><input placeholder='Password confirm' className='LogInElement' type='password' onChange={(event) => setConfpassword(event.target.value)}></input></p>}\r\n        <input className='greenBox LogInElement' type='submit' onClick={() => showNotification(logIn ? 'Login successful' : 'User creation successful', 'green')} value={logIn ? 'Login' : 'Register'} />\r\n      </form>\r\n      <input className='LogInElement' type='button' onClick={() => {\r\n          setLogIn(logIn ? false : true)\r\n          document.getElementById('form').reset()\r\n          setUsername('')\r\n          setPassword('')\r\n          setConfpassword('')\r\n          }} value={logIn ? 'Register' : 'Login'}></input>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LogInBox","const getTimeText = (time) => {\r\n\r\nlet timeDifference = (new Date() - time) / 1000;\r\n  let timeText = ''\r\n  if(timeDifference < 60) {\r\n    timeText = Math.round(timeDifference) + \"s\"\r\n  } else if(timeDifference < 3600) {\r\n    timeText = Math.round(timeDifference / 60) + \"min\"\r\n  } else if(timeDifference < 86400) {\r\n    timeText = Math.round(timeDifference / 3600) + \"h\"\r\n  } else {\r\n    timeText = Math.round(timeDifference / 86400) + \"d\"\r\n  }\r\n\r\n  return (timeText)\r\n}\r\n\r\nexport default {getTimeText}","import React from 'react'\r\n\r\nimport utils from '../../services/utils'\r\n\r\nimport socket from '../../services/connect'\r\n\r\nconst MessageBox = ({id, text, likes, location, color, time, messageType, cm}) => {\r\n  const colorIndex = color ? color : 0\r\n\r\n  const colors=['#E0BBE4', '#AC91C8', '#D291BC', '#FEC8D8', '#FFDFD3']\r\n\r\n  const styles = {\r\n    backgroundColor: colors[colorIndex],\r\n    border: '2px solid gray',\r\n  }\r\n  \r\n  const timeText = utils.getTimeText(time)\r\n\r\n  const handleClick = (event) => {\r\n    if(messageType==='Answer'){\r\n      return\r\n    }\r\n\r\n    if(messageType==='Thread'){\r\n      return handleThreadClick(event, id)\r\n    }\r\n\r\n    if(messageType==='OpenedThread'){\r\n      return handleOpenedThreadClick(event, cm)\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className='message' style={styles}>\r\n      <button onClick={handleClick} className=\"messageButton\">  \r\n        <div className=\"multilineText\">{text}</div>\r\n        <br></br>\r\n        <span role=\"img\" aria-label='Location'>{timeText} ago 📍{location}</span>\r\n      </button>\r\n      <div className=\"messageLikeContainer\">\r\n        <button className=\"likeButton\">▲</button>\r\n        <p id=\"likeText\">{likes}</p>\r\n        <button className=\"likeButton\">▼</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst handleOpenedThreadClick = (event, cm) => {\r\n  event.preventDefault()\r\n  cm()\r\n}\r\n\r\nconst handleThreadClick = (event, id) => {\r\n  //console.log('thread click')\r\n  event.preventDefault()\r\n  document.getElementById('root').style.pointerEvents = 'none'\r\n\r\n  socket.emit('GETANSWERSDISPLAYINFO', id)\r\n}\r\n\r\nexport default MessageBox","import axios from 'axios'\r\n\r\nconst getLocation = async (cb) => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (data) => {\r\n        //console.log(data.coords.latitude, data.coords.longitude)\r\n        let position = [data.coords.latitude.toString(), data.coords.longitude.toString()]\r\n        const response = await axios\r\n        .get(`${process.env.REACT_APP_LOCATIONAPI}${position[0]}+${position[1]}&pretty=1&no_annotations=1`)\r\n        const result = response.data.results[0] ? response.data.results[0].components : {}\r\n\r\n        if(result.village){\r\n          cb(result.village)\r\n        }\r\n        else if(result.town){\r\n          cb(result.town)\r\n        }\r\n        else if(result.city){\r\n          cb(result.city)\r\n        }\r\n\r\n        else if(result.country){\r\n          cb(result.country)\r\n        }\r\n      },\r\n      (error) => \r\n        console.log('Location not allowed'))\r\n  }\r\n\r\nconst locationHelper = {\r\n    getLocation\r\n}\r\n\r\nexport default locationHelper","import React, {useState, useEffect} from 'react'\r\nimport locationHelper from '../../services/locationApi'\r\n\r\nimport socket from '../../services/connect'\r\n\r\nconst NewMessageBox = ({id, showNotification, messageType}) => {\r\n  const [messageText, setMessageText] = useState('')\r\n  const [location, setLocation] = useState(null)\r\n\r\n  useEffect(() => {\r\n    socket.on(messageType==='Answer' ? 'ADDANSWERSUCCESS' : 'ADDTHREADSUCCESS', () => {\r\n      document.getElementById('root').style.pointerEvents = 'auto'\r\n      socket.emit(messageType==='Answer' ? 'GETANSWERSDISPLAYINFO' : 'GETTHREADSDISPLAYINFO', id)\r\n    })\r\n    \r\n    return function cleanup () {\r\n      messageType==='Answer' ? socket.off('ADDANSWERSUCCESS') : socket.off('ADDTHREADSUCCESS')\r\n    }\r\n  }, [id, messageType])\r\n\r\n  useEffect(() => {\r\n    async function data () {\r\n      locationHelper.getLocation((data) => setLocation(data))\r\n    }\r\n    data()\r\n  }, [])\r\n\r\n  const handleMessageSend = (event) => {\r\n    event.preventDefault()\r\n\r\n    if(messageText.length>0){\r\n      document.getElementById('root').style.pointerEvents = 'none'\r\n\r\n      const handler = messageType==='Answer' ? 'ADDANSWER' : 'ADDTHREAD'\r\n\r\n      socket.emit(handler, [messageText, location && location.length!==0 ? location : 'Unknown', id])\r\n    }\r\n    else{\r\n      showNotification('Yoo can\\'t be empty', 'red')\r\n    }\r\n\r\n    setMessageText('')\r\n    document.getElementById('texti').value=''\r\n\r\n  }\r\n\r\n  const handleTextChange = (event) => {\r\n    let text = event.target.value\r\n\r\n    if(text.split('\\n').length>4){\r\n      document.getElementById('texti').value=messageText\r\n      text=messageText\r\n\r\n    }\r\n    //console.log(text)\r\n\r\n    setMessageText(text)\r\n  }\r\n\r\n  return (\r\n    <div className=\"yellowBox message\">\r\n      <form onSubmit={handleMessageSend}>\r\n      <textarea className=\"messageInputTextBox\" id='texti' maxLength=\"300\" placeholder={messageType==='Answer' ? 'Write your answer here and press 🤟 to send!' : 'Write your Yoo here and press 🤟 to send!'} type='text' onChange={handleTextChange}></textarea>\r\n      <button className=\"sendMessageBtn\" type='submit' value=''>\r\n        <img className=\"sendMessageBtnImage\" src=\"/logo192.png\" alt={messageType==='Answer' ? 'Send new answer' : 'Send new thread'}></img>\r\n      </button>\r\n    </form>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default NewMessageBox","import React, {useEffect} from 'react'\r\nimport MessageBox from '../boxes/MessageBox'\r\n\r\nimport socket from '../../services/connect'\r\n\r\nconst Messages = ({messages, color, messageType, sm}) => {\r\n  useEffect(() => {\r\n    socket.on('ANSWERSDISPLAYINFO', data => {\r\n      //console.log(data)\r\n      //console.log('api request: answers')\r\n      document.getElementById('root').style.pointerEvents = 'auto'\r\n\r\n      return sm(data)\r\n    })\r\n    \r\n    return function cleanup () {\r\n      socket.off('ANSWERSDISPLAYINFO')\r\n    }\r\n  }, [sm])\r\n\r\n  return(\r\n    <div>\r\n      {messages.map(message =>\r\n        <MessageBox key={message.id}\r\n        id={message.id} \r\n        text={message.text} \r\n        likes={message.likes}\r\n        location={message.location}\r\n        color={messageType==='Answer' ? color : message.color}\r\n        time={message.time}\r\n        messageType={messageType}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messages","import React from 'react'\r\n\r\nimport socket from '../../services/connect'\r\n\r\nconst ChannelBox = ({id, name, followers, ct}) => {\r\n\r\n  const handleClick = (event) => {\r\n    ct ? handleOpenedChannelClick(event, ct) : handleChannelClick(event, id)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleClick} className={ct ? 'darkGreenBox channelInfo' : 'greenBox channelInfo'}>\r\n        #<b>{name}</b><br></br>\r\n        {followers}<span role=\"img\" aria-label='Followers'>👤</span>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n  \r\nconst handleChannelClick = (event, id) => {\r\n  //console.log('Channel click')\r\n  event.preventDefault()\r\n  document.getElementById('root').style.pointerEvents = 'none'\r\n\r\n  socket.emit('GETTHREADSDISPLAYINFO', id)\r\n}\r\n\r\nconst handleOpenedChannelClick = (event, ct) => {\r\n  event.preventDefault()\r\n  ct()\r\n}\r\n\r\nexport default ChannelBox","import React, {useEffect} from 'react'\r\nimport ChannelBox from '../boxes/ChannelBox'\r\n\r\nimport socket from '../../services/connect'\r\n\r\nconst Channels = ({channels, st, ct, openedChannel}) => {\r\n\r\n  useEffect(() => {\r\n    socket.on('THREADSDISPLAYINFO', data => {\r\n      //console.log(data)\r\n      //console.log('api request: Channels')\r\n      document.getElementById('root').style.pointerEvents = 'auto'\r\n\r\n      return st(data)\r\n    })\r\n    \r\n    return function cleanup () {\r\n      socket.off('THREADSDISPLAYINFO')\r\n    }\r\n  }, [st])\r\n\r\n  return(\r\n    channels \r\n    ? \r\n    <div>\r\n      {channels.map((channel) =>\r\n        <ChannelBox key={channel.id}\r\n        id={channel.id} \r\n        name={channel.text}\r\n        followers={channel.followers}\r\n        ct={channel.id!==openedChannel ? null : ct}\r\n        />\r\n      )}\r\n    </div>\r\n    :\r\n    null\r\n  )\r\n}\r\n\r\nexport default Channels","import React from 'react'\r\n\r\nconst Notification = ({message, color}) => {\r\n  const notificationStyle = {\r\n    color: color,\r\n    background: \"white\",\r\n\r\n    fontSize: \"20px\",\r\n    textAlign: \"center\",\r\n\r\n    borderStyle: \"solid\",\r\n    borderRadius: \"10px\",\r\n\r\n    padding: \"10px\",\r\n    paddingLeft: \"0px\",\r\n    paddingRight: \"0px\",\r\n    width: \"50%\",\r\n\r\n    position: \"absolute\",\r\n    left: \"25%\",\r\n    right: \"25%\",\r\n  }\r\n  \r\n    \r\n    \r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div style={notificationStyle}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","const appHandlers = (socket, showNotification, setUser, setChannels) => {\r\n\r\n//CONNECTION HANDLING\r\nsocket.on('connect_error', function(){\r\n    showNotification(\"Cannot connect to server\", 'red')\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    showNotification(\"Server disconnected\", 'red')\r\n  })\r\n\r\n  socket.on(\"*\",(event, data) => {\r\n    console.log(`EVENT: ${event} DATA: `);\r\n    console.log(data)\r\n  });\r\n\r\n  //ERROR HANDLING\r\n  socket.on('USERERROR', errorText => {\r\n    document.getElementById('root').style.pointerEvents = 'auto'\r\n    \r\n    showNotification(errorText, 'red')\r\n  })\r\n\r\n  //USER LOGIN HANDLING\r\n  socket.on('USERNOTLOGGED', () => {\r\n    document.getElementById('root').style.pointerEvents = 'auto'\r\n\r\n    showNotification(\"User logged out.\", 'red')\r\n  });\r\n\r\n  socket.on('USERDISPLAYINFO', user => {\r\n    document.getElementById('root').style.pointerEvents = 'auto'\r\n\r\n    setUser(user)\r\n  })\r\n\r\n  socket.on('CHANNELSDISPLAYINFO', data => {\r\n    document.getElementById('root').style.pointerEvents = 'auto'\r\n    \r\n    setChannels(data)\r\n  })\r\n}\r\n\r\nexport default appHandlers","import React, {useState, useEffect, useCallback} from 'react'\r\nimport './App.css'\r\n\r\nimport Header from './components/boxes/Header'\r\nimport UserInfo from './components/boxes/UserInfo'\r\nimport LogInBox from './components/boxes/LogInBox'\r\nimport MessageBox from './components/boxes/MessageBox'\r\nimport NewMessageBox from './components/boxes/NewMessageBox'\r\nimport Messages from './components/holders/Messages'\r\nimport Channels from './components/holders/Channels'\r\nimport Notification from './components/util/Notification'\r\n\r\nimport socket from './services/connect'\r\nimport appHandlers from './services/appEvents'\r\n\r\nconst App = () => {\r\n  const [answers, setAnswers] = useState([])\r\n  const [openedThread, setOpenedThread] = useState(null)\r\n  const [threads, setThreads] = useState([])\r\n  const [openedChannel, setOpenedChannel] = useState(null)\r\n  const [channels, setChannels] = useState([])\r\n\r\n  const [user, setUser] = useState(null)\r\n\r\n  const [notification, setNotification] = useState({message: null, color: 'green'})\r\n\r\n  const setToThreads = useCallback((data) => {\r\n    setOpenedChannel(null)\r\n    setOpenedThread(null)\r\n    setThreads([])\r\n    setAnswers([])\r\n\r\n    //console.log(data)\r\n    //console.log('here')\r\n    if(data[0].text){\r\n      setThreads(data)\r\n    }\r\n    setOpenedChannel(data[0].parentId)\r\n  }, [])\r\n\r\n  const setToAnswers = useCallback((data) => {\r\n    setOpenedThread(null)\r\n    setAnswers([])\r\n\r\n    console.log(data)\r\n    const openedThread = threads.find(\r\n      (thread) => thread.id===data[0].parentId)\r\n    //console.log(openedThread)\r\n    //console.log('here 2')\r\n    if(data[0].text){\r\n      setAnswers(data)\r\n    }\r\n    setOpenedThread(openedThread)\r\n  }, [threads])\r\n\r\n  const closeThreads = () => {\r\n    setThreads([])\r\n    setOpenedChannel(null)\r\n    setOpenedThread(null)\r\n    setAnswers([])\r\n  }\r\n\r\n  const closeAnswers = () => {\r\n    setAnswers([])\r\n    setOpenedThread(null)\r\n  }\r\n\r\n  const setToUser = useCallback((user) => {\r\n    setUser(user)\r\n  }, [])\r\n\r\n  const setToChannels = (channels) => {\r\n    setChannels(channels)\r\n  }\r\n\r\n  const logOut = () => {\r\n    setAnswers([])\r\n    setOpenedThread(null)\r\n    setThreads([])\r\n    setOpenedChannel(null)\r\n    setChannels([])\r\n    setUser(null)\r\n  }\r\n\r\n  const showNotification = (message, color) => {\r\n    setNotification({message, color})\r\n    setTimeout(() => {\r\n      setNotification({message: null, color})\r\n    }, 4000)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(user && !user.username){\r\n      socket.emit('GETUSERDISPLAYINFO')\r\n\r\n      socket.emit('GETCHANNELSDISPLAYINFO')\r\n    }\r\n  }, [user])\r\n\r\n  useEffect(() => {\r\n    appHandlers(socket, showNotification, setToUser, setToChannels)\r\n  }, [setToUser])\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <br></br>\r\n      <Notification \r\n        message={notification.message} \r\n        color={notification.color}/>\r\n      <br></br>\r\n      {!user ? \r\n      <LogInBox \r\n      su={setToUser}\r\n      showNotification={showNotification} />\r\n      :\r\n      <div className='row'>\r\n        <div id='channelColumn'>\r\n          <UserInfo \r\n            user={user} \r\n            logOut={logOut} \r\n            showNotification={showNotification} \r\n          />\r\n          <Channels \r\n            channels={channels}\r\n            st={setToThreads}\r\n            ct={closeThreads}\r\n            openedChannel={openedChannel} \r\n          />\r\n        </div>\r\n        <div id='messageColumn'>\r\n          {openedThread \r\n          ? \r\n          <div>\r\n            <MessageBox \r\n              text={openedThread.text}\r\n              likes={openedThread.likes}\r\n              location={openedThread.location}\r\n              color={openedThread.color}\r\n              time={openedThread.time}\r\n              messageType='OpenedThread'\r\n              cm={closeAnswers}\r\n            />\r\n            <Messages\r\n              messages={answers}\r\n              color={openedThread.color}\r\n              messageType='Answer'\r\n              sm={setToAnswers} \r\n            />\r\n            <NewMessageBox\r\n              id={openedThread.id} \r\n              showNotification={showNotification}\r\n              messageType='Answer'\r\n            />\r\n          </div>\r\n          : \r\n          openedChannel \r\n          ?\r\n          <div>\r\n            <NewMessageBox\r\n              id={openedChannel}\r\n              showNotification={showNotification}\r\n              messageType='Thread'\r\n            />\r\n            <Messages \r\n              messages={threads}\r\n              messageType='Thread'\r\n              sm={setToAnswers} \r\n            />\r\n          </div>\r\n          :\r\n          null\r\n          }\r\n        </div>\r\n      </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}